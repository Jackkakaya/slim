syntax = "proto3";

option go_package = "trie";

// Bitmap is an array of bits.
//
// Since 0.5.10
message Bitmap {

    // Words contains bitmap
    //
    // Since 0.5.10
    repeated uint64 Words = 20;


    // RankIndex speeds up rank() by pre-calcuate it
    //
    // Since 0.5.10
    repeated int32 RankIndex = 30;


    // SelectIndex speeds up select() by pre-calcuate it
    //
    // Since 0.5.10
    repeated int32 SelectIndex = 40;
}

// Nodes is array of all inner nodes in slim trie.
// It is NOT a public type and do not rely on it.
// Since protobuf just makes all message public.
//
// Since 0.5.10
message Nodes {

    // WithLeaves indicates whether to store leaf values(as an index).
    // Otherwise, it is a "filter" which can only provide existence information
    // but not location information.
    //
    // Since 0.5.10
    bool WithLeaves = 8;

    // WithPrefixContent indicates whether full inner prefixes are stored or only the
    // lengths of inner prefix are stored.
    //
    // Since 0.5.10
    bool WithPrefixContent = 9;

    // WithLeafPrefix indicates whether to store prefix of leaves.
    //
    // Since 0.5.10
    bool WithLeafPrefix = 10;

    // BigInnerCnt is number of big (267 bit) inner node.
    //
    // Since 0.5.10
    int32 BigInnerCnt = 11;

    // BigInnerOffset is the offset caused by "BigInner" nodes:
    //
    // Supposing that the i-th inner node is the j-th short inner node(an inner
    // node can be a short).
    //
    // The offset of this node in "Inners" is
    //
    //     257 * BigInnerCnt +
    //     17 * (i-BigInnerCnt-j) +
    //     ShortSize * j
    //
    // Thus we could create 2 variables to reduce offset calculation time:
    //
    //     BigInnerOffset = (257 - 17) * BigInnerCnt
    //     ShortMinusInner = ShortSize - 17
    //
    // The the offset is:
    //
    //     BigInnerOffset + 17 * i + ShortMinusInner * j
    //
    // Since 0.5.10
    int32 BigInnerOffset = 12;


    // ShortMinusInner is ShortSize minus 17.
    // See BigInnerOffset.
    //
    // Since 0.5.10
    int32 ShortMinusInner = 13;

    // ShortSize is the number of bit of short bitmap that reduce most memory
    // cost.
    //
    // Since 0.5.10
    int32 ShortSize = 14;

    // ShortMask has the lower ShortSize bit set to 1.
    //
    // Since 0.5.10
    uint64 ShortMask = 15;

    // Number of InnerPrefixes.
    // It is used to speed up lookup when there are not any prefixes.
    //
    // Since 0.5.10
    int32 InnerPrefixCnt = 16;



    // NodeTypeBM is a bitmap in which a "1" indicates the i-th node is an inner
    // node, otherwise it is a leaf.
    //
    // Since 0.5.10
    Bitmap NodeTypeBM = 20;


    // Inners is a array of var-length node label bitmaps.
    // The size of an element bitmap is aligned to 4.
    //
    // Since 0.5.10
    Bitmap Inners = 30;


    // ShortBM indicate most used inner node bitmaps.
    // These nodes takes 4 bits and the actual bitmaps are stored separate.
    //
    // Since 0.5.10
    Bitmap ShortBM = 31;


    // ShortTable is a mapping of short bitmap to full 17-bit bitmap.
    //
    // Since 0.5.10
    repeated uint32 ShortTable = 32;


    // InnerPrefixBM indicates whether an inner node has a prefix.
    // Its bit index is inner node index but not node-id.
    //
    // Since 0.5.10
    Bitmap InnerPrefixBM = 50;


    // InnerPrefixLens stores how many bits to move forword before looking up a key on an
    // inner node.
    // The length of this array is len(inner nodes).
    // Whether an inner node has prefix is stored in InnerPrefixBM.
    //
    // Since 0.5.10
    bytes  InnerPrefixLens = 51;


    // InnerPrefixStartBM is a bitmap of starting position of a prefix. aligned to 8.
    //
    // Since 0.5.10
    Bitmap InnerPrefixStartBM = 52;

    // InnerPrefixes of inner nodes.
    // An array element is a control byte followed by several data bytes.
    //
    // The 0-th bit in the control byte indicates whether a prefix is
    // trucated(not aligned to 8-bit).
    //
    // An inner node may have a prefix, if the starting bit of the node > the end
    // of previous node.
    //
    // The end of a prefix may not be 8-bit aligned.
    // Thus we need a bitmap to indicated this.
    // If prefix length is not 8-bit aligned, the trailing bits a filled with a
    // "1" followed by "0"s.
    // To retrieve the acturate prefix, remove the bits from the last "1".
    // E.g.:
    //
    //   prefix:                  11001100 11000011
    //   stored prefix:  00000000 11001100 11010011;  control byte = 0
    //
    //   prefix:                  11001100 110
    //   stored prefix:  00000001 11001100 11010000;  control byte = 1
    //
    // Since 0.5.10
    bytes InnerPrefixes = 54;



    // LeafBytes stores serialized leaf values.
    //
    // Since 0.5.10
    bytes  LeafBytes             = 60;


    // LeafPrefixBM indicates whether a leaf node has a prefix.
    // Its bit index is leaf node index but not node-id.
    //
    // Since 0.5.10
    Bitmap LeafPrefixBM = 61;


    // LeafPrefixStartBM is a bitmap of starting position of a prefix. aligned to 8.
    //
    // Since 0.5.10
    Bitmap LeafPrefixStartBM = 62;


    // LeafPrefixes are prefixes of leaf nodes.
    //
    // Since 0.5.10
    bytes LeafPrefixes = 63;


}
